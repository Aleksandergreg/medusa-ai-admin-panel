# azure-pipelines.yml
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*

pool:
  vmImage: ubuntu-latest

variables:
  NODE_VERSION: '20.x'
  ESLINT_GLOB: 'src/**/*.{ts,tsx}'
  ESLINT_IGNORE: 'src/types/*-json.ts'   # your big generated files

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '$(NODE_VERSION)'
    displayName: 'Use Node.js $(NODE_VERSION)'

  - task: Cache@2
    displayName: 'Cache npm'
    inputs:
      key: 'npm | "$(Agent.OS)" | **/package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
      path: $(Pipeline.Workspace)/.npm

  - script: |
      set -e
      OUT_DIR="$(Build.SourcesDirectory)/eslint-sarif"
      mkdir -p "$OUT_DIR"

      # find all packages (skip node_modules)
      PKGS=$(find . -name package.json -not -path "*/node_modules/*" -exec dirname {} \; | sort -u)

      for d in $PKGS; do
        [ -d "$d/src" ] || { echo "No src/ in $d â€” skipping SARIF."; continue; }

        echo "##[group]ESLint SARIF in $d"
        # install the SARIF formatter without changing package.json
        (cd "$d" && npm i --no-save @microsoft/eslint-formatter-sarif >/dev/null 2>&1 || true)

        PKG_NAME=$(basename "$d")
        (cd "$d" && npx --yes eslint "src/**/*.{ts,tsx}" \
          --ext .ts,.tsx \
          --ignore-pattern "src/types/*-json.ts" \
          -f @microsoft/eslint-formatter-sarif \
          -o "$OUT_DIR/${PKG_NAME}-eslint.sarif" || true)
        echo "##[endgroup]"
      done
    displayName: 'ESLint (produce SARIF for Scans tab)'
    condition: always()

  - task: PublishPipelineArtifact@1
    displayName: 'Publish ESLint SARIF -> CodeAnalysisLogs'
    inputs:
      targetPath: '$(Build.SourcesDirectory)/eslint-sarif'
      artifact: 'CodeAnalysisLogs'
    condition: always()
