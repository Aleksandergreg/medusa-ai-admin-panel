# azure-pipelines.yml
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*

pool:
  vmImage: ubuntu-latest

variables:
  NODE_VERSION: '20.x'
  ESLINT_GLOB: 'src/**/*.{ts,tsx}'
  ESLINT_IGNORE: 'src/types/*-json.ts'   # your big generated files

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '$(NODE_VERSION)'
    displayName: 'Use Node.js $(NODE_VERSION)'

  - task: Cache@2
    displayName: 'Cache npm'
    inputs:
      key: 'npm | "$(Agent.OS)" | **/package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
      path: $(Pipeline.Workspace)/.npm

  - script: |
      set -e
      npm config set cache "$(Pipeline.Workspace)/.npm" --global

      # Find all packages (skip node_modules)
      PKGS=$(find . -name package.json -not -path "*/node_modules/*" -exec dirname {} \; | sort -u)

      FAIL=0
      for d in $PKGS; do
        echo "##[group]Install deps in $d"
        (cd "$d" && npm ci --no-audit --no-fund) || FAIL=1
        echo "##[endgroup]"

        if [ -d "$d/src" ]; then
          echo "##[group]ESLint (fail build on errors) in $d"
          (cd "$d" && npx --yes eslint "$(ESLINT_GLOB)" --ext .ts,.tsx --max-warnings=0 --ignore-pattern "$(ESLINT_IGNORE)") || FAIL=1
          echo "##[endgroup]"

          echo "##[group]ESLint (checkstyle report) in $d"
          (cd "$d" && npx --yes eslint "$(ESLINT_GLOB)" --ext .ts,.tsx -f checkstyle -o "eslint-checkstyle.xml" --ignore-pattern "$(ESLINT_IGNORE)" || true)
          echo "##[endgroup]"
        else
          echo "No src/ in $d â€” skipping ESLint."
        fi
      done

      exit $FAIL
    displayName: 'Install and run ESLint in all packages'

  - task: PublishCodeAnalysisResults@2
    displayName: 'Publish ESLint Checkstyle reports'
    inputs:
      CheckStyleFile: '**/eslint-checkstyle.xml'
      FailIfQualityGateFails: false
    condition: always()
