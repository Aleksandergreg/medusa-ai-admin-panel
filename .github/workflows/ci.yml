name: CI

on:
  pull_request:
    branches: [ main ]

jobs:
  test-unit:
    name: Unit tests (my-medusa-store)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: my-medusa-store
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            my-medusa-store/package-lock.json
            medusa-mcp/package-lock.json

      - name: Install deps (medusa-mcp)
        run: npm ci || npm install --no-audit --no-fund
        working-directory: medusa-mcp

      # Build not required for unit tests since we import TS sources

      - name: Install deps
        run: npm ci

      - name: Run unit tests
        env:
          TEST_TYPE: unit
          NODE_OPTIONS: --experimental-vm-modules
          GEMINI_API_KEY: dummy-for-ci
          STORE_CORS: '*'
          ADMIN_CORS: '*'
          AUTH_CORS: '*'
          DATABASE_URL: file:./.tmp/test.sqlite
        run: npm run test:unit -- --watchman=false

  integration-http:
    name: Integration HTTP (assistant)
    runs-on: ubuntu-latest
    env:
      RUN_PG_TESTS: '1'
      DB_HOST: localhost
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      PGHOST: localhost
      PGUSER: postgres
      PGPASSWORD: postgres
      PGPORT: 5432
      PGSSLMODE: disable
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: my-medusa-store
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            my-medusa-store/package-lock.json
            medusa-mcp/package-lock.json

      - name: Install deps (parallel)
        run: |
          set -euo pipefail
          npm ci &
          main_pid=$!

          (
            cd ../medusa-mcp
            npm ci || npm install --no-audit --no-fund
          ) &
          mcp_pid=$!

          wait "$main_pid"
          wait "$mcp_pid"

      - name: Build medusa-mcp
        run: npm run build
        working-directory: medusa-mcp

      - name: Wait for Postgres to accept connections
        env:
          PGPASSWORD: postgres
        run: |
          for i in {1..60}; do
            if psql -h localhost -U postgres -d postgres -c 'select 1' >/dev/null 2>&1; then
              echo "Postgres is ready"
              break
            fi
            echo "Waiting for Postgres... ($i)"
            sleep 2
          done

      - name: Run integration http tests
        env:
          TEST_TYPE: integration:http
          NODE_OPTIONS: --experimental-vm-modules
          GEMINI_API_KEY: dummy-for-ci
          STORE_CORS: '*'
          ADMIN_CORS: '*'
          AUTH_CORS: '*'
          LOG_LEVEL: error
          DB_HOST: localhost
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
        run: npm run test:integration:http -- --watchman=false

  live-llm:
    name: Live Gemini (label-gated)
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'live-llm')
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    defaults:
      run:
        working-directory: my-medusa-store
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: my-medusa-store/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Run live planner check
        if: env.GEMINI_API_KEY != ''
        run: npm run test:live

      - name: Fail if secret missing
        if: env.GEMINI_API_KEY == ''
        run: |
          echo "GEMINI_API_KEY is not configured; skipping live test" >&2
          exit 1

  promptfoo:
    name: Promptfoo Assistant Checks (label-gated)
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'promptfoo')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      ADMIN_EMAIL: ci-admin@example.com
      ADMIN_PASSWORD: test-password-123
      MEDUSA_BACKEND_URL: http://localhost:9000
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            my-medusa-store/package-lock.json
            medusa-mcp/package-lock.json

      - name: Install deps (parallel)
        run: |
          set -euo pipefail

          (
            cd my-medusa-store
            npm ci
          ) &
          main_pid=$!

          (
            cd medusa-mcp
            npm ci || npm install --no-audit --no-fund
            npm run build
          ) &
          mcp_pid=$!

          wait "$main_pid"
          wait "$mcp_pid"

      - name: Create backend .env
        run: |
          cat > my-medusa-store/.env << 'EOF'
          STORE_CORS=*
          ADMIN_CORS=*
          AUTH_CORS=*
          JWT_SECRET=supersecret
          COOKIE_SECRET=supersecret
          DATABASE_URL=postgres://postgres:postgres@localhost:5432/postgres
          MEDUSA_BACKEND_URL=${{ env.MEDUSA_BACKEND_URL }}
          MEDUSA_USERNAME=${{ env.ADMIN_EMAIL }}
          MEDUSA_PASSWORD=${{ env.ADMIN_PASSWORD }}
          GEMINI_API_KEY=${{ env.GEMINI_API_KEY }}
          ASSISTANT_PLANNER_MODE=ci
          EOF

      - name: Migrate DB
        working-directory: my-medusa-store
        run: npx medusa db:migrate

      - name: Seed data
        working-directory: my-medusa-store
        run: npm run seed

      - name: Create admin user (emailpass)
        working-directory: my-medusa-store
        run: npx medusa user --email "${ADMIN_EMAIL}" --password "${ADMIN_PASSWORD}"

      - name: Start backend (background)
        working-directory: my-medusa-store
        run: |
          nohup npm run dev > ../backend.log 2>&1 &
          echo $! > ../backend.pid

      - name: Wait for backend
        run: |
          timeout 120 bash -c 'until curl -s -o /dev/null -w "%{http_code}" http://localhost:9000/app | grep -qE "200|301|302|401|404"; do sleep 2; done'

      - name: Acquire admin JWT
        id: adminjwt
        run: |
          set -euo pipefail
          token=$(curl -s -X POST http://localhost:9000/auth/user/emailpass \
            -H 'Content-Type: application/json' \
            -d "{\"email\":\"${ADMIN_EMAIL}\",\"password\":\"${ADMIN_PASSWORD}\"}" | jq -r '.token // .access_token // empty')
          if [ -z "$token" ]; then echo "Failed to get admin JWT" >&2; exit 1; fi
          echo "token=$token" >> $GITHUB_OUTPUT

      - name: Create Admin API key (secret)
        id: adminkey
        env:
          ADMIN_JWT: ${{ steps.adminjwt.outputs.token }}
        run: |
          set -euo pipefail
          resp=$(curl -s -X POST http://localhost:9000/admin/api-keys \
            -H "Authorization: Bearer $ADMIN_JWT" \
            -H 'Content-Type: application/json' \
            -d '{"title":"CI Admin Key","type":"secret"}')
          key=$(echo "$resp" | jq -r '.. | .token? // empty' | grep -m1 '^sk_')
          if [ -z "$key" ]; then echo "Failed to create admin API key: $resp" >&2; exit 1; fi
          echo "key=$key" >> $GITHUB_OUTPUT

      - name: Run Promptfoo (blocking)
        env:
          MEDUSA_ADMIN_API_KEY: ${{ steps.adminkey.outputs.key }}
        run: npx promptfoo@latest eval -c promptfoo/promptfooconfig.yaml promptfoo/datasets/prompts.yaml --max-concurrency 1

      - name: Dump Promptfoo results on failure
        if: failure()
        run: |
          echo "Promptfoo last-run contents:" && ls -la .promptfoo/last-run || true
          if [ -f .promptfoo/last-run/results.json ]; then
            echo "--- results.json ---"
            node -e "console.log(require('fs').readFileSync('.promptfoo/last-run/results.json','utf8'))"
          elif [ -f .promptfoo/last-run/report.json ]; then
            echo "--- report.json ---"
            node -e "console.log(require('fs').readFileSync('.promptfoo/last-run/report.json','utf8'))"
          else
            echo "No JSON results found under .promptfoo/last-run"
          fi

      - name: Dump raw assistant responses (on failure)
        if: failure()
        env:
          MEDUSA_ADMIN_API_KEY: ${{ steps.adminkey.outputs.key }}
        run: |
          echo "--- Raw assistant responses for dataset prompts ---"
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            payload=$(jq -n --arg p "$line" '{prompt: $p}')
            echo "PROMPT: $line"
            resp=$(curl -s -X POST http://localhost:9000/admin/assistant \
              -H "Content-Type: application/json" \
              -H "Authorization: Basic $MEDUSA_ADMIN_API_KEY" \
              -d "$payload")
            echo "$resp" | jq -r '.answer // "(no answer field)"'
            echo "TOOL: "$(echo "$resp" | jq -r '.history[0].tool_name // "(none)"')
            echo "ARGS: "$(echo "$resp" | jq -c '.history[0].tool_args // {}')
            echo "---"
          done < <(sed -n 's/^[[:space:]]*prompt:[[:space:]]*"\(.*\)".*/\1/p' promptfoo/datasets/prompts.yaml)

      - name: Upload Promptfoo artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: promptfoo-last-run
          path: .promptfoo/last-run

      - name: Stop backend
        if: always()
        run: if [ -f my-medusa-store/../backend.pid ]; then kill $(cat my-medusa-store/../backend.pid) || true; fi